openapi: 3.0.4
info:
  title: Chaindesk.ai - API OpenAPI specifications
  description: |-

  termsOfService: http://chaindesk.ai/terms
  contact:
    email: support@chaindesk.ai
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://api.chaindesk.ai
tags:
  - name: agents
    # description: Everything about your Pets
    # externalDocs:
    #   description: Find out more
    #   url: http://swagger.io
  - name: datastores
    # description: Operations
    # externalDocs:
    #   description: Find out more about our store
    #   url: http://swagger.io
  - name: datasources
paths:
  /datasources:
    post:
      tags:
        - datasources
      summary: Create a datasource
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  enum: ["web_page", "web_site", "text", "google_drive_file", google_drive_folder]
                datastoreId:
                  type: string
                custom_id:
                  type: string
                  description: Useful for multi-tenant setups
              required:
                - type
                - datastoreId
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: file
                fileName:
                  type: string
                type:
                  enum: ["file"]
                datastoreId:
                  type: string
                custom_id:
                  type: string
                  description: Useful for multi-tenant setups
              required:
                - type
                - datastoreId
                - file
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datasource'          
        '400':
          description: Invalid body
        '403':
          description: Unauthorized
  /datasources/{id}:
    delete:
      security:
        - bearerAuth: [] 
      tags:
        - datasources
      summary: Delete a datasource        
      parameters: 
        - in: path
          name: id
          schema:
            type: string
            description: ID of the datasource to delete
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Datasource'          
        '403':
          description: Unauthorized

  /agents/query/{id}:
    post:
      tags:
        - agents
      summary: This let you query your agent for a specific query.
      parameters: 
        - in: path
          name: id
          schema:
            type: string
            description: ID of the agent
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                query:
                  type: string
                  description: This is the query you want to ask your agent.
                conversationId:
                  type: string
                  description: ID of the conversation (If not provided a new conversation is created)
                visitorId:
                  type: string
                  description: ID of the participant that's sending the query (If not provided a new ID is created)
                temperature:
                  type: number
                  description: Temperature of the model (min 0.0, max 1.0)
                streaming:
                  type: boolean
                  description: Enable streaming
                promptType:
                  description: Set the prompt type for this query
                  enum: 
                    - raw
                    - customer_support
                promptTemplate:
                  type: string
                  description: Set the prompt template for this query
                filters:
                  type: object
                  properties:
                    custom_ids:
                      type: array
                      description: Filter by Custom IDs
                      items:
                        type: string
                    datasource_ids:
                      type: array
                      description: Filter by Datasource IDs
                      items:
                        type: string
                
              required:
                - query
                
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                properties:
                  answer:
                    type: string
                    description: The answer of the agent.
                  conversationId:
                    type: string
                    description: ID of the conversation
                  visitorId:
                    type: string
                    description: ID of the participant that's sending the query
                  sources:
                    type: array
                    items:
                      type: object
                      description: Datasource chunks that were used to generate the answer
        '400':
          description: Invalid body
        '403':
          description: Unauthorized

components:
  schemas:
    Datasource:
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        name:
          type: string
        status:
          enum: [unsynched, pending, running, synched, error, usage_limit_reached]
        groupId:
          type: string
        updatedAt:
          type: string
          format: date
        createdAt:
          type: string
          format: date
        lastSynch:
          type: string
          format: date
        config:
          type: object
      xml:
        name: datasource
        
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer

# security:
#   - bearerAuth: [] 